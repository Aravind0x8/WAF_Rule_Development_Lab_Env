#!/bin/bash

# WAF Lab - Normal Usage Testing Script
# Tests legitimate application usage patterns

echo "=================================================="
echo "WAF Lab - Normal Usage Testing"
echo "=================================================="

BASE_URL="http://localhost/sql-test-app"
TEST_RESULTS=()

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print test result
print_result() {
    local test_name=$1
    local status=$2
    local message=$3
    
    if [ "$status" == "PASS" ]; then
        echo -e "${GREEN}✓ PASS${NC}: $test_name - $message"
        TEST_RESULTS+=("PASS:$test_name")
    elif [ "$status" == "FAIL" ]; then
        echo -e "${RED}✗ FAIL${NC}: $test_name - $message"
        TEST_RESULTS+=("FAIL:$test_name")
    else
        echo -e "${YELLOW}? SKIP${NC}: $test_name - $message"
        TEST_RESULTS+=("SKIP:$test_name")
    fi
}

# Function to make HTTP request and check response
http_request() {
    local method=$1
    local url=$2
    local data=$3
    local expected_code=$4
    local test_name=$5
    
    if [ "$method" == "POST" ]; then
        response=$(curl -s -w "%{http_code}" -o /tmp/response_body -d "$data" \
                  -H "Content-Type: application/x-www-form-urlencoded" \
                  "$url")
    else
        response=$(curl -s -w "%{http_code}" -o /tmp/response_body "$url")
    fi
    
    http_code=${response: -3}
    
    if [ "$http_code" == "$expected_code" ]; then
        print_result "$test_name" "PASS" "Expected HTTP $expected_code, got $http_code"
    else
        print_result "$test_name" "FAIL" "Expected HTTP $expected_code, but got $http_code"
        echo "Response body:"
        cat /tmp/response_body
        echo
    fi
}

echo
echo "1. Testing Application Accessibility"
echo "-----------------------------------"

# Test main login page
http_request "GET" "$BASE_URL/index.html" "" "200" "Login Page Accessibility"

# Test dashboard without authentication (should redirect)
http_request "GET" "$BASE_URL/dashboard.php" "" "200" "Dashboard Page Exists"

echo
echo "2. Testing Legitimate User Logins"
echo "--------------------------------"

# Test valid user login
http_request "POST" "$BASE_URL/login.php" \
    "username=admin&password=admin123" "302" "Valid Admin Login"

# Test another valid user
http_request "POST" "$BASE_URL/login.php" \
    "username=john_doe&password=password123" "302" "Valid User Login"

# Test valid user with different case (should work)
http_request "POST" "$BASE_URL/login.php" \
    "username=TEST_USER&password=testpass" "302" "Valid User (Case Test)"

echo
echo "3. Testing Invalid Login Attempts (Legitimate)"
echo "---------------------------------------------"

# Test non-existent user
http_request "POST" "$BASE_URL/login.php" \
    "username=nonexistent&password=wrongpass" "200" "Non-existent User Login"

# Test wrong password for existing user
http_request "POST" "$BASE_URL/login.php" \
    "username=admin&password=wrongpassword" "200" "Wrong Password Login"

# Test empty credentials
http_request "POST" "$BASE_URL/login.php" \
    "username=&password=" "200" "Empty Credentials Login"

echo
echo "4. Testing Input Validation (Normal Inputs)"
echo "------------------------------------------"

# Test normal username with special characters (allowed)
http_request "POST" "$BASE_URL/login.php" \
    "username=user-name&password=test123" "200" "Username with Hyphen"

# Test normal username with numbers
http_request "POST" "$BASE_URL/login.php" \
    "username=user123&password=test123" "200" "Username with Numbers"

# Test normal username with underscore
http_request "POST" "$BASE_URL/login.php" \
    "username=user_name&password=test123" "200" "Username with Underscore"

echo
echo "5. Testing Application Functionality"
echo "-----------------------------------"

# Test accessing protected resource after login simulation
echo "Testing session functionality..."
# This would require maintaining session cookies in a real test

echo
echo "6. Testing Error Handling"
echo "------------------------"

# Test non-existent page
http_request "GET" "$BASE_URL/nonexistent-page.php" "" "404" "Non-existent Page"

# Test accessing PHP files directly that don't exist
http_request "GET" "$BASE_URL/config.php" "" "403" "Direct Config Access"

echo
echo "=================================================="
echo "TEST SUMMARY"
echo "=================================================="

pass_count=0
fail_count=0

for result in "${TEST_RESULTS[@]}"; do
    if [[ $result == PASS* ]]; then
        ((pass_count++))
    elif [[ $result == FAIL* ]]; then
        ((fail_count++))
    fi
done

total_tests=$((pass_count + fail_count))

echo
echo -e "Total Tests: $total_tests"
echo -e "${GREEN}Passed: $pass_count${NC}"
echo -e "${RED}Failed: $fail_count${NC}"

if [ $fail_count -eq 0 ]; then
    echo -e "${GREEN}All normal usage tests passed!${NC}"
    exit 0
else
    echo -e "${RED}Some tests failed. Check the ModSecurity logs for details.${NC}"
    exit 1
fi